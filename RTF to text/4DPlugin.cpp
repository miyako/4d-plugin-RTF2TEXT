/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : RTF2TEXT
 #	author : miyako
 #	2017/05/30
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- RTF2TEXT

		case 1 :
			RTF_to_text(pResult, pParams);
			break;

	}
}

// ----------------------------------- RTF2TEXT -----------------------------------


void RTF_to_text(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_BLOB Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

#if VERSIONMAC
	NSData *data = [[NSData alloc]initWithBytes:Param1.getBytesPtr() length:Param1.getBytesLength()];
	
	if(data)
	{
		NSError *error;
		NSDictionary *options = [[NSDictionary alloc]initWithObjects:[NSArray arrayWithObject:NSRTFTextDocumentType]
																												 forKeys:[NSArray arrayWithObject:NSDocumentTypeDocumentOption]];
		
		NSAttributedString *attributedString = [[NSAttributedString alloc]initWithData:data
																																					 options:options
																																documentAttributes:NULL
																																						 error:&error];
		if(attributedString)
		{
			NSData *text = [[attributedString string]dataUsingEncoding:NSUTF8StringEncoding];
			CUTF8String u8 = CUTF8String((const uint8_t *)[text bytes], [text length]);
			returnValue.setUTF8String(&u8);
			[attributedString release];
		}
		
		[data release];
	}
#else
	RTFCONVEXINFO RtfconvExInfo = { sizeof(RTFCONVEXINFO) };
	RtfconvExInfo.dwConversionMode = CONVMODE_NO_OUTPUT_BOM;
	
	int ulen = RtfconvStringEx((const void *)Param1.getBytesPtr(),
														 NULL,
														 0,
														 CP_UTF16,
														 &RtfconvExInfo,
														 0);
	if(ulen > 0)
	{
		std::vector<char>buf(ulen + sizeof(PA_Unichar));
		RtfconvStringEx((const void *)Param1.getBytesPtr(),
										&buf[0],
										0,
										CP_UTF16,
										&RtfconvExInfo,
										ulen);
		CUTF16String u16 = CUTF16String((const PA_Unichar *)&buf[0]);
		returnValue.setUTF16String(&u16);
	}
#endif
	
	returnValue.setReturn(pResult);
}

